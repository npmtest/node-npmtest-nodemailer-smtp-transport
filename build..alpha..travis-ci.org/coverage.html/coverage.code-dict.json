{"/home/travis/build/npmtest/node-npmtest-nodemailer-smtp-transport/test.js":"/* istanbul instrument in package npmtest_nodemailer_smtp_transport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodemailer-smtp-transport/lib.npmtest_nodemailer_smtp_transport.js":"/* istanbul instrument in package npmtest_nodemailer_smtp_transport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nodemailer_smtp_transport = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nodemailer_smtp_transport = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nodemailer-smtp-transport/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nodemailer-smtp-transport && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nodemailer_smtp_transport */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nodemailer_smtp_transport\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nodemailer_smtp_transport.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nodemailer_smtp_transport.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nodemailer_smtp_transport.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nodemailer_smtp_transport.__dirname + '/lib.npmtest_nodemailer_smtp_transport.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodemailer-smtp-transport/node_modules/nodemailer-smtp-transport/lib/smtp-transport.js":"'use strict';\n\nvar SMTPConnection = require('smtp-connection');\nvar packageData = require('../package.json');\nvar wellknown = require('nodemailer-wellknown');\nvar shared = require('nodemailer-shared');\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\n// expose to the world\nmodule.exports = function (options) {\n    return new SMTPTransport(options);\n};\n\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */\nfunction SMTPTransport(options) {\n    EventEmitter.call(this);\n\n    options = options || {};\n    if (typeof options === 'string') {\n        options = {\n            url: options\n        };\n    }\n\n    var urlData;\n    var service = options.service;\n\n    if (typeof options.getSocket === 'function') {\n        this.getSocket = options.getSocket;\n    }\n\n    if (options.url) {\n        urlData = shared.parseConnectionUrl(options.url);\n        service = service || urlData.service;\n    }\n\n    this.options = assign(\n        false, // create new object\n        options, // regular options\n        urlData, // url options\n        service && wellknown(service) // wellknown options\n    );\n\n    this.logger = shared.getLogger(this.options);\n\n    // temporary object\n    var connection = new SMTPConnection(this.options);\n\n    this.name = 'SMTP';\n    this.version = packageData.version + '[client:' + connection.version + ']';\n}\nutil.inherits(SMTPTransport, EventEmitter);\n\n/**\n * Placeholder function for creating proxy sockets. This method immediatelly returns\n * without a socket\n *\n * @param {Object} options Connection options\n * @param {Function} callback Callback function to run with the socket keys\n */\nSMTPTransport.prototype.getSocket = function (options, callback) {\n    // return immediatelly\n    return callback(null, false);\n};\n\n/**\n * Sends an e-mail using the selected settings\n *\n * @param {Object} mail Mail object\n * @param {Function} callback Callback function\n */\nSMTPTransport.prototype.send = function (mail, callback) {\n\n    this.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n            return callback(err);\n        }\n\n        var options = this.options;\n        if (socketOptions && socketOptions.connection) {\n            this.logger.info('Using proxied socket from %s:%s to %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || '', options.port || '');\n            // only copy options if we need to modify it\n            options = assign(false, options);\n            Object.keys(socketOptions).forEach(function (key) {\n                options[key] = socketOptions[key];\n            });\n        }\n\n        var connection = new SMTPConnection(options);\n        var returned = false;\n\n        connection.once('error', function (err) {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            connection.close();\n            return callback(err);\n        });\n\n        connection.once('end', function () {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(new Error('Connection closed'));\n        });\n\n        var sendMessage = function () {\n            var envelope = mail.message.getEnvelope();\n            var messageId = (mail.message.getHeader('message-id') || '').replace(/[<>\\s]/g, '');\n            var recipients = [].concat(envelope.to || []);\n            if (recipients.length > 3) {\n                recipients.push('...and ' + recipients.splice(2).length + ' more');\n            }\n\n            this.logger.info('Sending message <%s> to <%s>', messageId, recipients.join(', '));\n\n            connection.send(envelope, mail.message.createReadStream(), function (err, info) {\n                if (returned) {\n                    return;\n                }\n                returned = true;\n\n                connection.close();\n                if (err) {\n                    return callback(err);\n                }\n                info.envelope = {\n                    from: envelope.from,\n                    to: envelope.to\n                };\n                info.messageId = messageId;\n                return callback(null, info);\n            });\n        }.bind(this);\n\n        connection.connect(function () {\n            if (returned) {\n                return;\n            }\n\n            if (this.options.auth) {\n                connection.login(this.options.auth, function (err) {\n                    if (returned) {\n                        return;\n                    }\n\n                    if (err) {\n                        returned = true;\n                        connection.close();\n                        return callback(err);\n                    }\n\n                    sendMessage();\n                });\n            } else {\n                sendMessage();\n            }\n        }.bind(this));\n    }.bind(this));\n};\n\n/**\n * Verifies SMTP configuration\n *\n * @param {Function} callback Callback function\n */\nSMTPTransport.prototype.verify = function (callback) {\n    var promise;\n\n    if (!callback && typeof Promise === 'function') {\n        promise = new Promise(function (resolve, reject) {\n            callback = shared.callbackPromise(resolve, reject);\n        });\n    }\n\n    this.getSocket(this.options, function (err, socketOptions) {\n        if (err) {\n            return callback(err);\n        }\n\n        var options = this.options;\n        if (socketOptions && socketOptions.connection) {\n            this.logger.info('Using proxied socket from %s:%s', socketOptions.connection.remoteAddress, socketOptions.connection.remotePort);\n            options = assign(false, options);\n            Object.keys(socketOptions).forEach(function (key) {\n                options[key] = socketOptions[key];\n            });\n        }\n\n        var connection = new SMTPConnection(options);\n        var returned = false;\n\n        connection.once('error', function (err) {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            connection.close();\n            return callback(err);\n        });\n\n        connection.once('end', function () {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(new Error('Connection closed'));\n        });\n\n        var finalize = function () {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            connection.quit();\n            return callback(null, true);\n        };\n\n        connection.connect(function () {\n            if (returned) {\n                return;\n            }\n\n            if (this.options.auth) {\n                connection.login(this.options.auth, function (err) {\n                    if (returned) {\n                        return;\n                    }\n\n                    if (err) {\n                        returned = true;\n                        connection.close();\n                        return callback(err);\n                    }\n\n                    finalize();\n                });\n            } else {\n                finalize();\n            }\n        }.bind(this));\n    }.bind(this));\n\n    return promise;\n};\n\n/**\n * Copies properties from source objects to target objects\n */\nfunction assign( /* target, ... sources */ ) {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args.shift() || {};\n\n    args.forEach(function (source) {\n        Object.keys(source || {}).forEach(function (key) {\n            if (['tls', 'auth'].indexOf(key) >= 0 && source[key] && typeof source[key] === 'object') {\n                // tls and auth are special keys that need to be enumerated separately\n                // other objects are passed as is\n                if (!target[key]) {\n                    // esnure that target has this key\n                    target[key] = {};\n                }\n                Object.keys(source[key]).forEach(function (subKey) {\n                    target[key][subKey] = source[key][subKey];\n                });\n            } else {\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n}\n","/home/travis/build/npmtest/node-npmtest-nodemailer-smtp-transport/node_modules/nodemailer-smtp-transport/.eslintrc.js":"'use strict';\n\nmodule.exports = {\n    rules: {\n        indent: [2, 4, {\n            SwitchCase: 1\n        }],\n        quotes: [2, 'single'],\n        'linebreak-style': [2, 'unix'],\n        semi: [2, 'always'],\n        strict: [2, 'global'],\n        eqeqeq: 2,\n        'dot-notation': 2,\n        curly: 2,\n        'no-fallthrough': 2,\n        'quote-props': [2, 'as-needed'],\n        'no-unused-expressions': [2, {\n            allowShortCircuit: true\n        }],\n        'no-unused-vars': 2,\n        'no-undef': 2,\n        'handle-callback-err': 2,\n        'no-new': 2,\n        'new-cap': 2,\n        'no-eval': 2,\n        'no-invalid-this': 2,\n        radix: [2, 'always'],\n        'no-use-before-define': [2, 'nofunc'],\n        'callback-return': [2, ['callback', 'cb', 'done']],\n        'comma-dangle': [2, 'never'],\n        'comma-style': [2, 'last'],\n        'no-regex-spaces': 2,\n        'no-empty': 2,\n        'no-duplicate-case': 2,\n        'no-empty-character-class': 2,\n        'no-redeclare': [2, {\n            builtinGlobals: true\n        }],\n        'block-scoped-var': 2,\n        'no-sequences': 2,\n        'no-throw-literal': 2,\n        'no-useless-concat': 2,\n        'no-void': 2,\n        yoda: 2,\n        'no-bitwise': 2,\n        'no-lonely-if': 2,\n        'no-mixed-spaces-and-tabs': 2,\n        'no-console': 0\n    },\n    env: {\n        es6: false,\n        node: true\n    },\n    extends: 'eslint:recommended',\n    fix: true,\n    globals: {\n        Promise: false\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-nodemailer-smtp-transport/node_modules/nodemailer-smtp-transport/Gruntfile.js":"'use strict';\n\nmodule.exports = function (grunt) {\n\n    // Project configuration.\n    grunt.initConfig({\n        eslint: {\n            all: ['lib/*.js', 'test/*.js']\n        },\n\n        mochaTest: {\n            all: {\n                options: {\n                    reporter: 'spec'\n                },\n                src: ['test/*-test.js']\n            }\n        }\n    });\n\n    // Load the plugin(s)\n    grunt.loadNpmTasks('grunt-eslint');\n    grunt.loadNpmTasks('grunt-mocha-test');\n\n    // Tasks\n    grunt.registerTask('default', ['eslint', 'mochaTest']);\n};\n"}